diff --git a/include/avr_mcu_section.h b/include/avr_mcu_section.h
index fca11c6..fdcba4d 100644
--- a/include/avr_mcu_section.h
+++ b/include/avr_mcu_section.h
@@ -2,6 +2,7 @@
 	avr_mcu_section.h
 
 	Copyright 2008, 2009 Michel Pollet <buserror@gmail.com>
+	Copyright 2011 Peter Hatina <phatina@gmail.com>
 
  	This file is part of simavr.
 
@@ -81,7 +82,7 @@ struct avr_mmcu_long_t {
 struct avr_mmcu_string_t {
 	uint8_t tag;
 	uint8_t len;
-	char string[]; 
+	char * string; 
 } __attribute__((__packed__));
 
 struct avr_mmcu_addr_t {
@@ -95,22 +96,40 @@ struct avr_mmcu_vcd_trace_t {
 	uint8_t len;
 	uint8_t mask;
 	void * what;
-	char name[]; 
+	char * name; 
 } __attribute__((__packed__));
 
+#ifndef __cplusplus
 #define AVR_MCU_STRING(_tag, _str) \
 	const struct avr_mmcu_string_t _##_tag _MMCU_ = {\
 		.tag = _tag,\
 		.len = sizeof(_str),\
 		.string = _str,\
 	}
+#else
+#define AVR_MCU_STRING(_tag, _str) \
+	const struct avr_mmcu_string_t _##_tag _MMCU_ = {\
+		_tag,\
+		sizeof(_str),\
+		_str,\
+	}
+#endif
 
+#ifndef __cplusplus
 #define AVR_MCU_LONG(_tag, _val) \
 	const struct avr_mmcu_long_t _##_tag _MMCU_ = {\
 		.tag = _tag,\
 		.len = sizeof(uint32_t),\
 		.val = _val,\
 	}
+#else
+#define AVR_MCU_LONG(_tag, _val) \
+	const struct avr_mmcu_long_t _##_tag _MMCU_ = {\
+		_tag,\
+		sizeof(uint32_t),\
+		_val,\
+	}
+#endif
 
 #define AVR_MCU_BYTE(_tag, _val) \
 	const uint8_t _##_tag _MMCU_ = { _tag, 1, _val }
@@ -128,10 +147,17 @@ struct avr_mmcu_vcd_trace_t {
  * for the UART register, and the UDRE0 bit, so you can trace exactly
  * the timing of the changed using gtkwave.
  */
+#ifndef __cplusplus
 #define AVR_MCU_VCD_SYMBOL(_name) \
 	.tag = AVR_MMCU_TAG_VCD_TRACE, \
 	.len = sizeof(struct avr_mmcu_vcd_trace_t) - 2 + sizeof(_name),\
 	.name = _name
+#else
+#define AVR_MCU_VCD_SYMBOL(_name) \
+	AVR_MMCU_TAG_VCD_TRACE, \
+	sizeof(struct avr_mmcu_vcd_trace_t) - 2 + sizeof(_name),\
+	_name
+#endif
 
 /*!
  * Specifies the name and wanted period (in usec) for a VCD file
@@ -151,24 +177,43 @@ struct avr_mmcu_vcd_trace_t {
  * See definition of SIMAVR_CMD_* to see what commands can
  * be used from your firmware.
  */
+#ifndef __cplusplus
 #define AVR_MCU_SIMAVR_COMMAND(_register) \
 	const struct avr_mmcu_addr_t _simavr_command_register _MMCU_ = {\
 		.tag = AVR_MMCU_TAG_SIMAVR_COMMAND,\
 		.len = sizeof(void *),\
 		.what = (void*)_register, \
 	}
+#else
+#define AVR_MCU_SIMAVR_COMMAND(_register) \
+	const struct avr_mmcu_addr_t _simavr_command_register _MMCU_ = {\
+		AVR_MMCU_TAG_SIMAVR_COMMAND,\
+		sizeof(void *),\
+		(void*)_register, \
+	}
+#endif
+
 /*!
  * Similar to AVR_MCU_SIMAVR_COMMAND, The CONSOLE allows the AVR code
  * to declare a register (typically a GPIO register, but any unused
  * register can work...) that will allow printing on the host's console
  * without using a UART to do debug.
  */
+#ifndef __cplusplus
 #define AVR_MCU_SIMAVR_CONSOLE(_register) \
 	const struct avr_mmcu_addr_t _simavr_command_register _MMCU_ = {\
 		.tag = AVR_MMCU_TAG_SIMAVR_CONSOLE,\
 		.len = sizeof(void *),\
 		.what = (void*)_register, \
 	}
+#else
+#define AVR_MCU_SIMAVR_CONSOLE(_register) \
+	const struct avr_mmcu_addr_t _simavr_command_register _MMCU_ = {\
+		AVR_MMCU_TAG_SIMAVR_CONSOLE,\
+		sizeof(void *),\
+		(void*)_register, \
+	}
+#endif
 
 /*!
  * This tag allows you to specify the voltages used by your board
