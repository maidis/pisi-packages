diff -Naur screenkey-0.2/MANIFEST.in screenkey/MANIFEST.in
--- screenkey-0.2/MANIFEST.in	1970-01-01 02:00:00.000000000 +0200
+++ screenkey/MANIFEST.in	2011-02-07 02:11:53.283250000 +0200
@@ -0,0 +1,2 @@
+include screenkey README LICENSE
+recursive-include data *
diff -Naur screenkey-0.2/PKG-INFO screenkey/PKG-INFO
--- screenkey-0.2/PKG-INFO	2010-06-15 09:11:28.000000000 +0300
+++ screenkey/PKG-INFO	1970-01-01 02:00:00.000000000 +0200
@@ -1,15 +0,0 @@
-Metadata-Version: 1.0
-Name: screenkey
-Version: 0.2
-Summary: A screencast tool to display keys
-Home-page: http://launchpad.net/screenkey
-Author: Pablo Seminario
-Author-email: pabluk@gmail.com
-License: GPLv3
-Download-URL: http://launchpad.net/screenkey/+download
-Description: 
-            Screenkey is a useful tool for presentations or screencasts.
-            Inspired by ScreenFlick and initially based on the key-mon project code.
-            
-Keywords: screencast keyboard keys
-Platform: POSIX
diff -Naur screenkey-0.2/Screenkey/__init__.py screenkey/Screenkey/__init__.py
--- screenkey-0.2/Screenkey/__init__.py	2010-06-14 17:24:42.000000000 +0300
+++ screenkey/Screenkey/__init__.py	2011-02-07 02:11:53.283250000 +0200
@@ -1,6 +1,6 @@
 
-APP_NAME = 'Screenkey'
-APP_DESC = 'Screencast your keys'
+APP_NAME = "Screenkey"
+APP_DESC = _("Screencast your keys")
 APP_URL = 'http://launchpad.net/screenkey'
 VERSION = '0.2'
 AUTHOR = 'Pablo Seminario'
diff -Naur screenkey-0.2/Screenkey/listenkbd.py screenkey/Screenkey/listenkbd.py
--- screenkey-0.2/Screenkey/listenkbd.py	1970-01-01 02:00:00.000000000 +0200
+++ screenkey/Screenkey/listenkbd.py	2011-02-07 02:11:53.283250000 +0200
@@ -0,0 +1,281 @@
+# Copyright (c) 2010 Pablo Seminario <pabluk@gmail.com>
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+import threading
+import time
+import sys
+import subprocess
+import modmap
+
+from Xlib import X, XK, display
+from Xlib.ext import record
+from Xlib.protocol import rq
+
+MODE_RAW = 0
+MODE_NORMAL = 1
+
+REPLACE_KEYS = {
+    'XK_Escape':_('Esc '),
+    'XK_Tab':u'\u21B9 ',
+    'XK_Return':u'\u23CE ',
+    'XK_Space':u' ',
+    'XK_Caps_Lock':_('Caps '),
+    'XK_F1':u'F1 ', 
+    'XK_F2':u'F2 ', 
+    'XK_F3':u'F3 ', 
+    'XK_F4':u'F4 ', 
+    'XK_F5':u'F5 ', 
+    'XK_F6':u'F6 ', 
+    'XK_F7':u'F7 ', 
+    'XK_F8':u'F8 ', 
+    'XK_F9':u'F9 ', 
+    'XK_F10':u'F10 ', 
+    'XK_F11':u'F11 ', 
+    'XK_F12':u'F12 ', 
+    'XK_Home':_('Home '),
+    'XK_Up':u'\u2191',
+    'XK_Page_Up':_('PgUp '),
+    'XK_Left':u'\u2190',
+    'XK_Right':u'\u2192',
+    'XK_End':_('End '),
+    'XK_Down':u'\u2193',
+    'XK_Next':_('PgDn '),
+    'XK_Insert':_('Ins '),
+    'XK_Delete':_('Del '),
+}
+
+class ListenKbd(threading.Thread):
+
+    def __init__(self, label, logger, mode):
+        threading.Thread.__init__(self)
+        self.mode = mode
+        self.logger = logger
+        self.label = label
+        self.text = ""
+        self.command = None
+        self.shift = None
+        self.cmd_keys = {
+            'shift': False,
+            'ctrl': False,
+            'alt': False,
+            'capslock': False,
+            'meta': False,
+            'super':False
+            }
+
+        self.logger.debug("Thread created")
+        self.keymap = modmap.get_keymap_table()
+        self.modifiers = modmap.get_modifier_map()
+
+        self.local_dpy = display.Display()
+        self.record_dpy = display.Display()
+
+        if not self.record_dpy.has_extension("RECORD"):
+            self.logger.error("RECORD extension not found.")
+            print "RECORD extension not found"
+            sys.exit(1)
+
+        self.ctx = self.record_dpy.record_create_context(
+                0,
+                [record.AllClients],
+                [{
+                        'core_requests': (0, 0),
+                        'core_replies': (0, 0),
+                        'ext_requests': (0, 0, 0, 0),
+                        'ext_replies': (0, 0, 0, 0),
+                        'delivered_events': (0, 0),
+                        'device_events': (X.KeyPress, X.KeyRelease),
+                        'errors': (0, 0),
+                        'client_started': False,
+                        'client_died': False,
+                }])
+
+    def run(self):
+        self.logger.debug("Thread started.")
+        self.record_dpy.record_enable_context(self.ctx, self.key_press)
+
+    def lookup_keysym(self, keysym):
+        for name in dir(XK):
+            if name[:3] == "XK_" and getattr(XK, name) == keysym:
+                return name[3:]
+        return ""
+
+    def replace_key(self, key, keysym):
+        for name in dir(XK):
+            if name[:3] == "XK_" and getattr(XK, name) == keysym:
+                if name in REPLACE_KEYS:
+                    return REPLACE_KEYS[name]
+
+    def update_text(self, string=None):
+        if not string is None:
+            self.text = "%s%s" % (self.label.get_text(), string)
+            self.label.set_text(self.text)
+        else:
+            self.label.set_text("")
+        self.label.emit("text-changed")
+ 
+    def key_press(self, reply):
+
+        # FIXME:
+        # This is not the most efficient way to detect the
+        # use of sudo/gksudo but it works.
+        sudo_is_running = subprocess.call(['ps', '-C', 'sudo'], 
+                    stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
+        if not sudo_is_running:
+            return
+
+        if reply.category != record.FromServer:
+            return
+        if reply.client_swapped:
+            self.logger.warning(
+                "* received swapped protocol data, cowardly ignored"
+            )
+            return
+        if not len(reply.data) or ord(reply.data[0]) < 2:
+            # not an event
+            return
+        data = reply.data
+        key = None
+        while len(data):
+            event, data = rq.EventField(None).parse_binary_value(data, 
+                                    self.record_dpy.display, None, None)
+            if event.type in [X.KeyPress, X.KeyRelease]:
+                if self.mode == MODE_NORMAL:
+                    key = self.key_normal_mode(event)
+                if self.mode == MODE_RAW:
+                    key = self.key_raw_mode(event)
+                if not key:
+                    return
+        self.update_text(key)
+
+    def key_normal_mode(self, event):
+        key = ''
+        mod = ''
+        keysym = self.local_dpy.keycode_to_keysym(event.detail, 0)
+
+        if event.detail in self.keymap:
+            key_normal, key_shift, key_dead, key_deadshift = \
+                                            self.keymap[event.detail]
+            self.logger.debug("Key %s(keycode) %s. Symbols %s" % 
+                (event.detail, 
+                 event.type == X.KeyPress and "pressed" or "released", 
+                 self.keymap[event.detail])
+                )
+        else:
+            self.logger.debug('No mapping for scan_code %d' % event.detail)
+            return
+
+
+        # Alt key
+        if event.detail in self.modifiers['mod1']:
+            if event.type == X.KeyPress:
+                self.cmd_keys['alt'] = True
+            else:
+                self.cmd_keys['alt'] = False
+            return
+        # Meta key 
+        # Fixme: it must use self.modifiers['mod5']
+        #        but doesn't work
+        if event.detail == 108:
+            if event.type == X.KeyPress:
+                self.cmd_keys['meta'] = True
+            else:
+                self.cmd_keys['meta'] = False
+            return
+        # Super key 
+        if event.detail in self.modifiers['mod4']:
+            if event.type == X.KeyPress:
+                self.cmd_keys['super'] = True
+            else:
+                self.cmd_keys['super'] = False
+            return
+        # Ctrl keys
+        elif event.detail in self.modifiers['control']:
+            if event.type == X.KeyPress:
+                self.cmd_keys['ctrl'] = True
+            else:
+                self.cmd_keys['ctrl'] = False
+            return
+        # Shift keys
+        elif event.detail in self.modifiers['shift']:
+            if event.type == X.KeyPress:
+                self.cmd_keys['shift'] = True
+            else:
+                self.cmd_keys['shift'] = False
+            return
+        # Capslock key
+        elif event.detail in self.modifiers['lock']:
+            if event.type == X.KeyPress:
+                if self.cmd_keys['capslock']:
+                    self.cmd_keys['capslock'] = False
+                else:
+                    self.cmd_keys['capslock'] = True
+            return
+        # Backspace key
+        elif event.detail == 22 and event.type == X.KeyPress:
+            if len(self.label.get_text()) > 0:
+                self.label.set_text(
+                    unicode(self.label.get_text(), 'utf-8')[:-1]
+                )
+                key = ""
+            else:
+                return
+        else:
+            if event.type == X.KeyPress:
+                key = key_normal
+                if self.cmd_keys['ctrl']:
+                    mod = mod + _("Ctrl+")
+                if self.cmd_keys['alt']:
+                    mod = mod + _("Alt+")
+                if self.cmd_keys['super']:
+                    mod = mod + _("Super+")
+
+                if self.cmd_keys['shift']:
+                    key = key_shift
+                if self.cmd_keys['capslock'] \
+                    and ord(key_normal) in range(97,123):
+                    key = key_shift
+                if self.cmd_keys['meta']:
+                    key = key_dead
+                if self.cmd_keys['shift'] and self.cmd_keys['meta']:
+                    key = key_deadshift
+
+                string = self.replace_key(key, keysym)
+                if string:
+                    key = string
+
+                if mod != '':
+                    key = "%s%s " % (mod, key)
+                else:
+                    key = "%s%s" % (mod, key)
+            else:
+                return
+
+        return key
+
+    def key_raw_mode(self, event):
+        key = ''
+        if event.type == X.KeyPress:
+            keysym = self.local_dpy.keycode_to_keysym(event.detail, 0)
+            key = self.lookup_keysym(keysym)
+        else:
+            return
+        return key
+
+    def stop(self):
+        self.local_dpy.record_disable_context(self.ctx)
+        self.local_dpy.flush()
+        self.record_dpy.record_free_context(self.ctx)
+        self.logger.debug("Thread stopped.")
+
diff -Naur screenkey-0.2/Screenkey/listenkdb.py screenkey/Screenkey/listenkdb.py
--- screenkey-0.2/Screenkey/listenkdb.py	2010-06-14 22:49:56.000000000 +0300
+++ screenkey/Screenkey/listenkdb.py	1970-01-01 02:00:00.000000000 +0200
@@ -1,271 +0,0 @@
-# Copyright (c) 2010 Pablo Seminario <pabluk@gmail.com>
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-# 
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-import threading
-import time
-import sys
-import modmap
-
-from Xlib import X, XK, display
-from Xlib.ext import record
-from Xlib.protocol import rq
-
-MODE_RAW = 0
-MODE_NORMAL = 1
-
-REPLACE_KEYS = {
-    'XK_Escape':u'Esc ',
-    'XK_Tab':u'\u21B9 ',
-    'XK_Return':u'\u23CE ',
-    'XK_Space':u' ',
-    'XK_Caps_Lock':u'Caps ',
-    'XK_F1':u'F1 ', 
-    'XK_F2':u'F2 ', 
-    'XK_F3':u'F3 ', 
-    'XK_F4':u'F4 ', 
-    'XK_F5':u'F5 ', 
-    'XK_F6':u'F6 ', 
-    'XK_F7':u'F7 ', 
-    'XK_F8':u'F8 ', 
-    'XK_F9':u'F9 ', 
-    'XK_F10':u'F10 ', 
-    'XK_F11':u'F11 ', 
-    'XK_F12':u'F12 ', 
-    'XK_Home':u'Home ',
-    'XK_Up':u'\u2191',
-    'XK_Page_Up':u'PgUp ',
-    'XK_Left':u'\u2190',
-    'XK_Right':u'\u2192',
-    'XK_End':u'End ',
-    'XK_Down':u'\u2193',
-    'XK_Next':u'PgDn ',
-    'XK_Insert':u'Ins ',
-    'XK_Delete':u'Del ',
-}
-
-class ListenKbd(threading.Thread):
-
-    def __init__(self, label, logger, mode):
-        threading.Thread.__init__(self)
-        self.mode = mode
-        self.logger = logger
-        self.label = label
-        self.text = ""
-        self.command = None
-        self.shift = None
-        self.cmd_keys = {
-            'shift': False,
-            'ctrl': False,
-            'alt': False,
-            'capslock': False,
-            'meta': False,
-            'super':False
-            }
-
-        self.logger.debug("Thread created")
-        self.keymap = modmap.get_keymap_table()
-        self.modifiers = modmap.get_modifier_map()
-
-        self.local_dpy = display.Display()
-        self.record_dpy = display.Display()
-
-        if not self.record_dpy.has_extension("RECORD"):
-            self.logger.error("RECORD extension not found.")
-            print "RECORD extension not found"
-            sys.exit(1)
-
-        self.ctx = self.record_dpy.record_create_context(
-                0,
-                [record.AllClients],
-                [{
-                        'core_requests': (0, 0),
-                        'core_replies': (0, 0),
-                        'ext_requests': (0, 0, 0, 0),
-                        'ext_replies': (0, 0, 0, 0),
-                        'delivered_events': (0, 0),
-                        'device_events': (X.KeyPress, X.KeyRelease),
-                        'errors': (0, 0),
-                        'client_started': False,
-                        'client_died': False,
-                }])
-
-    def run(self):
-        self.logger.debug("Thread started.")
-        self.record_dpy.record_enable_context(self.ctx, self.key_press)
-
-    def lookup_keysym(self, keysym):
-        for name in dir(XK):
-            if name[:3] == "XK_" and getattr(XK, name) == keysym:
-                return name[3:]
-        return ""
-
-    def replace_key(self, key, keysym):
-        for name in dir(XK):
-            if name[:3] == "XK_" and getattr(XK, name) == keysym:
-                if name in REPLACE_KEYS:
-                    return REPLACE_KEYS[name]
-
-    def update_text(self, string=None):
-        if not string is None:
-            self.text = "%s%s" % (self.label.get_text(), string)
-            self.label.set_text(self.text)
-        else:
-            self.label.set_text("")
-        self.label.emit("text-changed")
- 
-    def key_press(self, reply):
-        if reply.category != record.FromServer:
-            return
-        if reply.client_swapped:
-            self.logger.warning(
-                "* received swapped protocol data, cowardly ignored"
-            )
-            return
-        if not len(reply.data) or ord(reply.data[0]) < 2:
-            # not an event
-            return
-        data = reply.data
-        key = None
-        while len(data):
-            event, data = rq.EventField(None).parse_binary_value(data, 
-                                    self.record_dpy.display, None, None)
-            if event.type in [X.KeyPress, X.KeyRelease]:
-                if self.mode == MODE_NORMAL:
-                    key = self.key_normal_mode(event)
-                if self.mode == MODE_RAW:
-                    key = self.key_raw_mode(event)
-                if not key:
-                    return
-        self.update_text(key)
-
-    def key_normal_mode(self, event):
-        key = ''
-        mod = ''
-        keysym = self.local_dpy.keycode_to_keysym(event.detail, 0)
-
-        if event.detail in self.keymap:
-            key_normal, key_shift, key_dead, key_deadshift = \
-                                            self.keymap[event.detail]
-            self.logger.debug("Key %s(keycode) %s. Symbols %s" % 
-                (event.detail, 
-                 event.type == X.KeyPress and "pressed" or "released", 
-                 self.keymap[event.detail])
-                )
-        else:
-            self.logger.debug('No mapping for scan_code %d' % event.detail)
-            return
-
-
-        # Alt key
-        if event.detail in self.modifiers['mod1']:
-            if event.type == X.KeyPress:
-                self.cmd_keys['alt'] = True
-            else:
-                self.cmd_keys['alt'] = False
-            return
-        # Meta key 
-        # Fixme: it must use self.modifiers['mod5']
-        #        but doesn't work
-        if event.detail == 108:
-            if event.type == X.KeyPress:
-                self.cmd_keys['meta'] = True
-            else:
-                self.cmd_keys['meta'] = False
-            return
-        # Super key 
-        if event.detail in self.modifiers['mod4']:
-            if event.type == X.KeyPress:
-                self.cmd_keys['super'] = True
-            else:
-                self.cmd_keys['super'] = False
-            return
-        # Ctrl keys
-        elif event.detail in self.modifiers['control']:
-            if event.type == X.KeyPress:
-                self.cmd_keys['ctrl'] = True
-            else:
-                self.cmd_keys['ctrl'] = False
-            return
-        # Shift keys
-        elif event.detail in self.modifiers['shift']:
-            if event.type == X.KeyPress:
-                self.cmd_keys['shift'] = True
-            else:
-                self.cmd_keys['shift'] = False
-            return
-        # Capslock key
-        elif event.detail in self.modifiers['lock']:
-            if event.type == X.KeyPress:
-                if self.cmd_keys['capslock']:
-                    self.cmd_keys['capslock'] = False
-                else:
-                    self.cmd_keys['capslock'] = True
-            return
-        # Backspace key
-        elif event.detail == 22 and event.type == X.KeyPress:
-            if len(self.label.get_text()) > 0:
-                self.label.set_text(
-                    unicode(self.label.get_text(), 'utf-8')[:-1]
-                )
-                key = ""
-            else:
-                return
-        else:
-            if event.type == X.KeyPress:
-                key = key_normal
-                if self.cmd_keys['ctrl']:
-                    mod = mod + "Ctrl+"
-                if self.cmd_keys['alt']:
-                    mod = mod + "Alt+"
-                if self.cmd_keys['super']:
-                    mod = mod + "Super+"
-
-                if self.cmd_keys['shift']:
-                    key = key_shift
-                if self.cmd_keys['capslock'] \
-                    and ord(key_normal) in range(97,123):
-                    key = key_shift
-                if self.cmd_keys['meta']:
-                    key = key_dead
-                if self.cmd_keys['shift'] and self.cmd_keys['meta']:
-                    key = key_deadshift
-
-                string = self.replace_key(key, keysym)
-                if string:
-                    key = string
-
-                if mod != '':
-                    key = "%s%s " % (mod, key)
-                else:
-                    key = "%s%s" % (mod, key)
-            else:
-                return
-
-        return key
-
-    def key_raw_mode(self, event):
-        key = ''
-        if event.type == X.KeyPress:
-            keysym = self.local_dpy.keycode_to_keysym(event.detail, 0)
-            key = self.lookup_keysym(keysym)
-        else:
-            return
-        return key
-
-    def stop(self):
-        self.local_dpy.record_disable_context(self.ctx)
-        self.local_dpy.flush()
-        self.record_dpy.record_free_context(self.ctx)
-        self.logger.debug("Thread stopped.")
-
diff -Naur screenkey-0.2/Screenkey/screenkey.py screenkey/Screenkey/screenkey.py
--- screenkey-0.2/Screenkey/screenkey.py	2010-06-14 22:49:56.000000000 +0300
+++ screenkey/Screenkey/screenkey.py	2011-02-07 02:11:53.283250000 +0200
@@ -23,7 +23,7 @@
 from threading import Timer
 
 from Screenkey import APP_NAME, APP_DESC, APP_URL, VERSION, AUTHOR
-from listenkdb import ListenKbd
+from listenkbd import ListenKbd
 
 POS_TOP = 0
 POS_CENTER = 1
@@ -39,18 +39,18 @@
 class Screenkey(gtk.Window):
 
     POSITIONS = {
-        POS_TOP:'Top',
-        POS_CENTER:'Center',
-        POS_BOTTOM:'Bottom',
+        POS_TOP:_('Top'),
+        POS_CENTER:_('Center'),
+        POS_BOTTOM:_('Bottom'),
     }
     SIZES = {
-        SIZE_LARGE: 'Large',
-        SIZE_MEDIUM: 'Medium',
-        SIZE_SMALL: 'Small',
+        SIZE_LARGE:_('Large'),
+        SIZE_MEDIUM:_('Medium'),
+        SIZE_SMALL:_('Small'),
     }
     MODES = {
-        MODE_RAW:'Raw',
-        MODE_NORMAL:'Normal',
+        MODE_RAW:_('Raw'),
+        MODE_NORMAL:_('Normal'),
     }
 
     STATE_FILE = os.path.join(glib.get_user_cache_dir(), 
@@ -110,7 +110,7 @@
 
         menu = gtk.Menu()
 
-        show_item = gtk.CheckMenuItem("Show keys")
+        show_item = gtk.CheckMenuItem(_("Show keys"))
         show_item.set_active(True)
         show_item.connect("toggled", self.on_show_keys)
         show_item.show()
@@ -142,8 +142,8 @@
             self.systray = appindicator.Indicator(APP_NAME, 
                            'indicator-messages', 
                             appindicator.CATEGORY_APPLICATION_STATUS)
-            self.systray.set_status (appindicator.STATUS_ACTIVE)
-            self.systray.set_attention_icon ("indicator-messages-new")
+            self.systray.set_status(appindicator.STATUS_ACTIVE)
+            self.systray.set_attention_icon("indicator-messages-new")
             self.systray.set_icon(
                     "preferences-desktop-keyboard-shortcuts")
             self.systray.set_menu(menu)
@@ -292,17 +292,17 @@
                 self.options[name] = index
                 self.logger.debug("Window position changed.")
 
-        frm_main = gtk.Frame("Preferences")
+        frm_main = gtk.Frame(_("Preferences"))
         frm_main.set_border_width(6)
         vbox_main = gtk.VBox()
 
-        frm_time = gtk.Frame("<b>Time</b>")
+        frm_time = gtk.Frame(_("<b>Time</b>"))
         frm_time.set_border_width(4)
         frm_time.get_label_widget().set_use_markup(True)
         frm_time.set_shadow_type(gtk.SHADOW_NONE)
         hbox_time = gtk.HBox()
-        lbl_time1 = gtk.Label("Display for")
-        lbl_time2 = gtk.Label("seconds")
+        lbl_time1 = gtk.Label(_("Display for"))
+        lbl_time2 = gtk.Label(_("seconds"))
         sb_time = gtk.SpinButton(digits=1)
         sb_time.set_increments(0.5, 1.0)
         sb_time.set_range(0.5, 10.0)
@@ -319,7 +319,7 @@
         frm_time.add(hbox_time)
         frm_time.show_all()
 
-        frm_aspect = gtk.Frame("<b>Aspect</b>")
+        frm_aspect = gtk.Frame(_("<b>Aspect</b>"))
         frm_aspect.set_border_width(4)
         frm_aspect.get_label_widget().set_use_markup(True)
         frm_aspect.set_shadow_type(gtk.SHADOW_NONE)
@@ -327,7 +327,7 @@
 
         hbox1_aspect = gtk.HBox()
 
-        lbl_positions = gtk.Label("Position")
+        lbl_positions = gtk.Label(_("Position"))
         cbox_positions = gtk.combo_box_new_text()
         cbox_positions.set_name('position')
         for key, value in self.POSITIONS.items():
@@ -342,7 +342,7 @@
 
         hbox2_aspect = gtk.HBox()
 
-        lbl_sizes = gtk.Label("Size")
+        lbl_sizes = gtk.Label(_("Size"))
         cbox_sizes = gtk.combo_box_new_text()
         cbox_sizes.set_name('size')
         for key, value in self.SIZES.items():
@@ -359,12 +359,12 @@
         vbox_aspect.pack_start(hbox2_aspect)
         frm_aspect.add(vbox_aspect)
 
-        frm_kbd = gtk.Frame("<b>Keys</b>")
+        frm_kbd = gtk.Frame(_("<b>Keys</b>"))
         frm_kbd.set_border_width(4)
         frm_kbd.get_label_widget().set_use_markup(True)
         frm_kbd.set_shadow_type(gtk.SHADOW_NONE)
         hbox_kbd = gtk.HBox()
-        lbl_kbd = gtk.Label("Mode")
+        lbl_kbd = gtk.Label(_("Mode"))
         cbox_modes = gtk.combo_box_new_text()
         cbox_modes.set_name('mode')
         for key, value in self.MODES.items():
diff -Naur screenkey-0.2/screenkey screenkey/screenkey
--- screenkey-0.2/screenkey	2010-06-14 22:49:56.000000000 +0300
+++ screenkey/screenkey	2011-02-07 02:11:53.283250000 +0200
@@ -19,6 +19,11 @@
 import pygtk
 pygtk.require('2.0')
 import gtk
+import gettext
+import locale
+
+locale.setlocale(locale.LC_ALL, '')
+gettext.install('screenkey', unicode=True)
 
 from Screenkey import APP_NAME, APP_DESC, VERSION
 from Screenkey.screenkey import Screenkey
@@ -29,9 +34,9 @@
     parser = OptionParser(description=APP_DESC, version=VERSION)
     parser.add_option("--no-detach", action="store_true", 
         dest="nodetach", default=False, 
-        help="do not detach from the parent")
+        help=_("do not detach from the parent"))
     parser.add_option("-d", "--debug", action="store_true", 
-        dest="debug", default=False, help="show debug information")
+        dest="debug", default=False, help=_("show debug information"))
     (options, args) = parser.parse_args()
 
     if options.debug:
