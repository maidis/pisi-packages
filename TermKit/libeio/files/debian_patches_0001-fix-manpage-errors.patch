From: Alessandro Ghedini <al3xbio@gmail.com>
Date: Sun, 5 Jun 2011 17:05:23 +0200
Subject: fix manpage errors

This patch fixes many spelling errors in the eio.3 manpage found by lintian.
---
 eio.3 |   30 ++++++++++++------------------
 1 files changed, 12 insertions(+), 18 deletions(-)

diff --git a/eio.3 b/eio.3
index ec5bde3..dc19588 100644
--- a/eio.3
+++ b/eio.3
@@ -450,7 +450,7 @@ The big advantage of this flag is that you can forget about fork (and
 forget about forgetting to tell libev about forking) when you use this
 flag.
 .Sp
-This flag setting cannot be overriden or specified in the \f(CW\*(C`LIBEV_FLAGS\*(C'\fR
+This flag setting cannot be overridden or specified in the \f(CW\*(C`LIBEV_FLAGS\*(C'\fR
 environment variable.
 .ie n .IP """EVBACKEND_SELECT""  (value 1, portable select backend)" 4
 .el .IP "\f(CWEVBACKEND_SELECT\fR  (value 1, portable select backend)" 4
@@ -703,7 +703,7 @@ those events and any outstanding ones, but will not block your process in
 case there are no events and will return after one iteration of the loop.
 .Sp
 A flags value of \f(CW\*(C`EVLOOP_ONESHOT\*(C'\fR will look for new events (waiting if
-neccessary) and will handle those and any outstanding ones. It will block
+necessary) and will handle those and any outstanding ones. It will block
 your process until at least one new event arrives, and will return after
 one iteration of the loop. This is useful if you are waiting for some
 external event in conjunction with something not expressible using other
@@ -989,8 +989,8 @@ Although some watcher types do not have type-specific arguments
 .ie n .IP """ev_TYPE_init"" (ev_TYPE *watcher, callback, [args])" 4
 .el .IP "\f(CWev_TYPE_init\fR (ev_TYPE *watcher, callback, [args])" 4
 .IX Item "ev_TYPE_init (ev_TYPE *watcher, callback, [args])"
-This convinience macro rolls both \f(CW\*(C`ev_init\*(C'\fR and \f(CW\*(C`ev_TYPE_set\*(C'\fR macro
-calls into a single call. This is the most convinient method to initialise
+This convenience macro rolls both \f(CW\*(C`ev_init\*(C'\fR and \f(CW\*(C`ev_TYPE_set\*(C'\fR macro
+calls into a single call. This is the most convenient method to initialise
 a watcher. The same limitations apply, of course.
 .ie n .IP """ev_TYPE_start"" (loop *, ev_TYPE *watcher)" 4
 .el .IP "\f(CWev_TYPE_start\fR (loop *, ev_TYPE *watcher)" 4
@@ -1174,7 +1174,7 @@ it is best to always use non-blocking I/O: An extra \f(CW\*(C`read\*(C'\fR(2) re
 \&\f(CW\*(C`EAGAIN\*(C'\fR is far preferable to a program hanging until some data arrives.
 .PP
 If you cannot run the fd in non-blocking mode (for example you should not
-play around with an Xlib connection), then you have to seperately re-test
+play around with an Xlib connection), then you have to separately re-test
 whether a file descriptor is really ready with a known-to-be good interface
 such as poll (fortunately in our Xlib example, Xlib already does this on
 its own, so its quite safe to use).
@@ -2248,7 +2248,7 @@ used).
 \&  struct ev_loop *loop_hi = ev_default_init (0);
 \&  struct ev_loop *loop_lo = 0;
 \&  struct ev_embed embed;
-\&  
+\&
 \&  // see if there is a chance of getting one that works
 \&  // (remember that a flags value of 0 means autodetection)
 \&  loop_lo = ev_embeddable_backends () & ev_recommended_backends ()
@@ -2274,7 +2274,7 @@ kqueue implementation). Store the kqueue/socket\-only event loop in
 \&  struct ev_loop *loop = ev_default_init (0);
 \&  struct ev_loop *loop_socket = 0;
 \&  struct ev_embed embed;
-\&  
+\&
 \&  if (ev_supported_backends () & ~ev_recommended_backends () & EVBACKEND_KQUEUE)
 \&    if ((loop_socket = ev_loop_new (EVBACKEND_KQUEUE))
 \&      {
@@ -2426,7 +2426,7 @@ similar contexts (see the dicusssion of \f(CW\*(C`EV_ATOMIC_T\*(C'\fR in the emb
 section below on what exactly this means).
 .Sp
 This call incurs the overhead of a syscall only once per loop iteration,
-so while the overhead might be noticable, it doesn't apply to repeated
+so while the overhead might be noticeable, it doesn't apply to repeated
 calls to \f(CW\*(C`ev_async_send\*(C'\fR.
 .IP "bool = ev_async_pending (ev_async *)" 4
 .IX Item "bool = ev_async_pending (ev_async *)"
@@ -2878,7 +2878,7 @@ For this of course you need the m4 file:
 .Sh "\s-1PREPROCESSOR\s0 \s-1SYMBOLS/MACROS\s0"
 .IX Subsection "PREPROCESSOR SYMBOLS/MACROS"
 Libev can be configured via a variety of preprocessor symbols you have to
-define before including any of its files. The default in the absense of
+define before including any of its files. The default in the absence of
 autoconf is noted for every option.
 .IP "\s-1EV_STANDALONE\s0" 4
 .IX Item "EV_STANDALONE"
@@ -2992,7 +2992,7 @@ type is easily found in the C language, so you can provide your own type
 that you know is safe for your purposes. It is used both for signal handler \*(L"locking\*(R"
 as well as for signal and thread safety in \f(CW\*(C`ev_async\*(C'\fR watchers.
 .Sp
-In the absense of this define, libev will use \f(CW\*(C`sig_atomic_t volatile\*(C'\fR
+In the absence of this define, libev will use \f(CW\*(C`sig_atomic_t volatile\*(C'\fR
 (from \fIsignal.h\fR), which is usually good enough on most platforms.
 .IP "\s-1EV_H\s0" 4
 .IX Item "EV_H"
@@ -3089,7 +3089,7 @@ two).
 Heaps are not very cache-efficient. To improve the cache-efficiency of the
 timer and periodics heap, libev uses a 4\-heap when this symbol is defined
 to \f(CW1\fR. The 4\-heap uses more complicated (longer) code but has a
-noticable after performance with many (thousands) of watchers.
+noticeable after performance with many (thousands) of watchers.
 .Sp
 The default is \f(CW1\fR unless \f(CW\*(C`EV_MINIMAL\*(C'\fR is set in which case it is \f(CW0\fR
 (disabled).
@@ -3214,7 +3214,7 @@ If you want to know which design is best for your problem, then I cannot
 help you but by giving some generic advice:
 .IP "\(bu" 4
 most applications have a main thread: use the default libev loop
-in that thread, or create a seperate thread running only the default loop.
+in that thread, or create a separate thread running only the default loop.
 .Sp
 This helps integrating other libraries or software modules that use libev
 themselves and don't care/know about threading.
@@ -3420,9 +3420,3 @@ If you know of other additional requirements drop me a note.
 .SH "AUTHOR"
 .IX Header "AUTHOR"
 Marc Lehmann <libev@schmorp.de>.
-.SH "POD ERRORS"
-.IX Header "POD ERRORS"
-Hey! \fBThe above document had some coding errors, which are explained below:\fR
-.IP "Around line 3052:" 4
-.IX Item "Around line 3052:"
-You forgot a '=back' before '=head2'
-- 
